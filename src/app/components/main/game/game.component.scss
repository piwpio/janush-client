:host {
  width: 100%;
  height: 100%;
  display: block;
  position: relative;
}

.flex-container {
  position: absolute;
  display: flex;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
}

$fieldSize: var(--field-size);
$fieldsInRow: 9;
$boardContainerSize: calc(#{$fieldSize} * (#{$fieldsInRow} + 2));
$fieldsContainerSize: calc(#{$fieldSize} * #{$fieldsInRow});

.fields-container {
  display: flex;
  width: $fieldsContainerSize;
  height: $fieldSize;
  position: absolute;
  padding-left: $fieldSize;
  transform-origin: calc(#{$boardContainerSize} / 2) calc(#{$boardContainerSize} / 2);
}

.field-container {
  width: $fieldSize;
  height: $fieldSize;
  display: flex;
  justify-content: center;
  align-items: flex-end;

  .field {
    width: 90%;
    height: 90%;
    background-repeat: no-repeat;
    background-size: contain;
  }
}

.fields-right-container {
  transform: rotate(90deg);
  .field {
    transform: rotate(-90deg);
  }
}

.fields-bottom-container {
  transform: rotate(180deg);
  .field {
    transform: rotate(-180deg);
  }
}

.fields-left-container {
  transform: rotate(270deg);
  .field {
    transform: rotate(-270deg);
  }
}

#board-container {
  height: $boardContainerSize;
  width: $boardContainerSize;
  position: relative;
  display: inline-block;

  .field {
    transform: rotate(90deg);
  }
}

$backBoardContainerSize: var(--backboard-size);
$fieldsContainerPadding: calc((#{$backBoardContainerSize} - #{$boardContainerSize})/2 + #{$fieldSize});
$fieldsContainerPadding2: calc((#{$backBoardContainerSize} - #{$boardContainerSize})/2 - #{$fieldSize});

#back-board-container {
  // linear-gradient(black, black),
  background-blend-mode: saturation;
  background-repeat: repeat;
  width: $backBoardContainerSize;
  height: $backBoardContainerSize;
  position: absolute;

  .fields-container {
    padding-top: $fieldsContainerPadding2;
    padding-left: $fieldsContainerPadding;
    transform-origin: calc(#{$backBoardContainerSize} / 2) calc(#{$backBoardContainerSize} / 2);

    .field-container .field {
      border: 1px solid black;
      border-radius: 3px;
    }
  }
}

.round-items-container {
  flex-direction: column;

  .power-item-container {
    position: relative;

    .round-item-container {
      width: calc(#{$fieldSize} * 2.6);
      height: calc(#{$fieldSize} * 2.6);
    }

    .special-offer-container {
      position: absolute;
      width: calc(#{$fieldSize} * 2);
      height: calc(#{$fieldSize} * 1.4);
      left: calc(#{$fieldSize} * 2 / 2 * -1);
      top: calc(#{$fieldSize} * 1.4 /2 * -1);

      transform: scale(1) rotate(315deg);
      .animation-container {
        width:100%;
        height: 100%;
        background-size: contain;
        background-repeat: no-repeat;
        animation: heartbeat 1s linear infinite;
        background-image: url("../../../../assets/graphics/special_offer.png");
      }
    }

    @keyframes heartbeat {
      0% { transform: scale(1); }
      50% { transform: scale(1.5); }
      100% { transform: scale(1); }
    }
  }

  .normal-items-container {
    display: flex;
    margin-top: 10px;

    .round-item-container {
      margin-right: 10px;
      &:last-child {
        margin-right: 0;
      }
    }
  }

  .round-item-container {
    width: calc(#{$fieldSize} * 1.6);
    height: calc(#{$fieldSize} * 1.6);
    position: relative;
    border-radius: 10px;
    overflow: hidden;

    .background {
      background-color: white;
      opacity: .5;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
    }

    .round-item {
      width: 100%;
      height: 100%;
      background-repeat: no-repeat;
      background-size: contain;
      display: inline-block;
      position: relative;

      .disabled {
        background-size: contain;
        display: none;
        width: 100%;
        height: 100%;
        background-image: url("../../../../assets/graphics/disabled.png");
      }
    }
  }
}

.control-change-container {
  position: absolute;
  bottom: 20px;
  left: 20px;

  span {
    cursor: pointer;
  }
}

